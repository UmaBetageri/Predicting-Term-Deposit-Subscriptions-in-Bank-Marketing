# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pT8ZztrgzsbhZecSjcpoFuLJZN9MGb8F
"""

import streamlit as st
import joblib
import pandas as pd
from sklearn.preprocessing import MinMaxScaler, LabelEncoder

# Load model and scaler
model = joblib.load('random_forest_model.pkl')
scaler = joblib.load('scaler.pkl')

# Define the input features
def preprocess_input(data):
    # Assuming data is a dictionary with feature names as keys
    df = pd.DataFrame([data])
    # Apply the same preprocessing steps used for training

    # Scale numerical features
    numerical_features = ['age', 'duration', 'campaign', 'pdays', 'previous', 'cons_price_idx', 'cons_conf_idx', 'nr_employed']
    df[numerical_features] = scaler.transform(df[numerical_features])

    # Encode categorical features
    categorical_features = ['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'day_of_week', 'poutcome']
    for feature in categorical_features:
        df[feature] = LabelEncoder().fit_transform(df[feature])

    return df

def main():
    st.title("Model Prediction App")

    # Input fields
    age = st.number_input('Age', min_value=0)
    job = st.selectbox('Job', ['admin.', 'blue-collar', 'entrepreneur', 'housemaid', 'management', 'retired', 'self-employed', 'services', 'student', 'technician', 'unemployed'])
    marital = st.selectbox('Marital Status', ['divorced', 'married', 'single'])
    education = st.selectbox('Education', ['basic.4y', 'basic.6y', 'basic.9y', 'high.school', 'illiterate', 'master', 'phd', 'university.degree'])
    default = st.selectbox('Credit in Default', ['no', 'yes'])
    housing = st.selectbox('Housing Loan', ['no', 'yes'])
    loan = st.selectbox('Personal Loan', ['no', 'yes'])
    contact = st.selectbox('Contact Communication Type', ['cellular', 'telephone'])
    month = st.selectbox('Last Contact Month of Year', ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'])
    day_of_week = st.selectbox('Last Contact Day of the Week', ['mon', 'tue', 'wed', 'thu', 'fri'])
    duration = st.number_input('Duration', min_value=0)
    campaign = st.number_input('Campaign', min_value=0)
    pdays = st.number_input('Pdays', min_value=-1)  # -1 means 'unknown'
    previous = st.number_input('Previous', min_value=0)
    poutcome = st.selectbox('Poutcome', ['failure', 'other', 'success', 'unknown'])
    cons_price_idx = st.number_input('Consumer Price Index', min_value=0.0)
    cons_conf_idx = st.number_input('Consumer Confidence Index', min_value=0.0)
    nr_employed = st.number_input('Number of Employees', min_value=0.0)

    # Predict button
    if st.button('Predict'):
        data = {
            'age': age,
            'job': job,
            'marital': marital,
            'education': education,
            'default': default,
            'housing': housing,
            'loan': loan,
            'contact': contact,
            'month': month,
            'day_of_week': day_of_week,
            'duration': duration,
            'campaign': campaign,
            'pdays': pdays,
            'previous': previous,
            'poutcome': poutcome,
            'cons_price_idx': cons_price_idx,
            'cons_conf_idx': cons_conf_idx,
            'nr_employed': nr_employed
        }

        processed_data = preprocess_input(data)
        prediction = model.predict(processed_data)
        st.write('Prediction:', 'Yes' if prediction[0] == 1 else 'No')

if __name__ == "__main__":
    main()