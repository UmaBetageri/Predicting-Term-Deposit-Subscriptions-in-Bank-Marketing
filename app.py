# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pT8ZztrgzsbhZecSjcpoFuLJZN9MGb8F
"""

import streamlit as st
import pandas as pd
import pickle

# Load the trained model and scaler
with open('random_forest_model.pkl', 'rb') as file:
    model = pickle.load(file)

with open('scaler.pkl', 'rb') as file:
    scaler = pickle.load(file)

# Function to preprocess data (including scaling)
def preprocess_data(df):
    # List of numerical columns
    numerical_cols = ['age', 'duration', 'campaign', 'pdays', 'previous',
                      'cons_price_idx', 'cons_conf_idx', 'nr_employed']

    # Scale the numerical data
    df[numerical_cols] = scaler.transform(df[numerical_cols])

    # Leave categorical columns unchanged
    return df

# Input form for user data
st.title("Term Deposit Subscription Prediction")

# Collect input from the user
age = st.number_input('Age', min_value=18, max_value=100, value=30)
job = st.selectbox('Job', ['admin.', 'technician', 'blue-collar', 'services', 'management', 'entrepreneur', 'retired', 'self-employed', 'housemaid', 'unemployed', 'student', 'unknown'])
marital = st.selectbox('Marital Status', ['married', 'single', 'divorced', 'unknown'])
education = st.selectbox('Education', ['primary', 'secondary', 'tertiary', 'unknown'])
default = st.selectbox('Has credit in default?', ['yes', 'no'])
housing = st.selectbox('Has housing loan?', ['yes', 'no'])
loan = st.selectbox('Has personal loan?', ['yes', 'no'])
contact = st.selectbox('Contact communication type', ['cellular', 'telephone'])
month = st.selectbox('Last contact month', ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'])
day_of_week = st.selectbox('Last contact day of the week', ['mon', 'tue', 'wed', 'thu', 'fri'])
duration = st.number_input('Last contact duration (in seconds)', min_value=0, value=50)
campaign = st.number_input('Number of contacts performed during this campaign', min_value=1, value=1)
pdays = st.number_input('Number of days since the client was last contacted', min_value=-1, value=-1)
previous = st.number_input('Number of contacts performed before this campaign', min_value=0, value=0)
poutcome = st.selectbox('Outcome of the previous marketing campaign', ['failure', 'success', 'nonexistent', 'unknown'])
cons_price_idx = st.number_input('Consumer price index', value=93.994)
cons_conf_idx = st.number_input('Consumer confidence index', value=-36.4)
nr_employed = st.number_input('Number of employees', value=5099.1)

# Create a DataFrame for the input data
input_data = pd.DataFrame({
    'age': [age],
    'job': [job],
    'marital': [marital],
    'education': [education],
    'default': [default],
    'housing': [housing],
    'loan': [loan],
    'contact': [contact],
    'month': [month],
    'day_of_week': [day_of_week],
    'duration': [duration],
    'campaign': [campaign],
    'pdays': [pdays],
    'previous': [previous],
    'poutcome': [poutcome],
    'cons_price_idx': [cons_price_idx],
    'cons_conf_idx': [cons_conf_idx],
    'nr_employed': [nr_employed]
})

# Preprocess the input data (including scaling the numeric columns)
input_data_preprocessed = preprocess_data(input_data)

# Make prediction
if st.button("Predict"):
    prediction = model.predict(input_data_preprocessed)
    if prediction[0] == 1:
        st.success("The client is likely to subscribe to a term deposit.")
    else:
        st.warning("The client is unlikely to subscribe to a term deposit.")